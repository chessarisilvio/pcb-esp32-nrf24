#include <SPI.h>
#include <RF24.h>
#include <WiFi.h>
#include <HTTPClient.h>
#include <WebServer.h>

//  Wi-Fi setup
const char* ssid = "YOUR_WIFI_SSID";
const char* password = "YOUR_WIFI_PASSWORD";

//  Change this to your Display ESP32 IP
const char* myDisplayIP = "192.168.1.101";

#define CE_PIN   17
#define CSN_PIN  5

//  Reversed from Node A
const byte txAddress[6] = "00002";
const byte rxAddress[6] = "00001";

RF24 radio(CE_PIN, CSN_PIN);
WebServer server(8080);

String lastReceivedMessage = "";
unsigned long lastSendTime = 0;
const unsigned long sendInterval = 7000;

void setup() {
  Serial.begin(115200);
  Serial.println("Node B: ESP32 + nRF24 starting...");

  if (!radio.begin()) {
    Serial.println("Radio init failed!");
    while (true);
  }

  radio.openWritingPipe(txAddress);
  radio.openReadingPipe(1, rxAddress);
  radio.setPALevel(RF24_PA_LOW);
  radio.setDataRate(RF24_250KBPS);
  radio.startListening();
  Serial.println("Radio OK.");

  WiFi.begin(ssid, password);
  Serial.print("Connecting to Wi‑Fi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println();
  Serial.print("Wi‑Fi connected, IP: ");
  Serial.println(WiFi.localIP());

  server.on("/", handleRoot);
  server.on("/send", HTTP_POST, handleSend);
  server.begin();

  Serial.println("Web server running on port 8080");
}

void loop() {
  server.handleClient();

  if (radio.available()) {
    char buffer[32] = {0};
    radio.read(&buffer, sizeof(buffer));
    lastReceivedMessage = String(buffer);

    Serial.println("==== Received via nRF24 ====");
    Serial.println(lastReceivedMessage);
    Serial.println("============================");
    sendToDisplay(lastReceivedMessage);
  }

  if (millis() - lastSendTime > sendInterval) {
    String msg = "Node B uptime: " + String(millis() / 1000) + " s";
    sendNRF24Message(msg);
    lastSendTime = millis();
  }
}

void sendNRF24Message(String msg) {
  radio.stopListening();
  char data[32];
  msg.toCharArray(data, 32);
  bool ok = radio.write(&data, sizeof(data));

  Serial.print("Sending: "); Serial.print(msg);
  Serial.println(ok ? " ✓" : " ✗");
  radio.startListening();
}

void sendToDisplay(String msg) {
  if (WiFi.status() != WL_CONNECTED) {
    Serial.println("Wi‑Fi not connected, skip display update");
    return;
  }

  HTTPClient http;
  String url = "http://" + String(myDisplayIP) + "/update";
  http.begin(url);
  http.addHeader("Content-Type", "application/x-www-form-urlencoded");
  int code = http.POST("message=" + msg);

  if (code > 0)
    Serial.printf("Display update → HTTP %d\n", code);
  else
    Serial.printf("Display update failed: %s\n", http.errorToString(code).c_str());

  http.end();
}

void handleRoot() {
  String html =
    "<html><body><h1>Node B</h1>"
    "<form action='/send' method='POST'>"
    "<input name='message' placeholder='Enter message' maxlength='30'>"
    "<input type='submit' value='Send'>"
    "</form>"
    "<p>Last received: " + lastReceivedMessage + "</p>"
    "</body></html>";

  server.send(200, "text/html", html);
}

void handleSend() {
  if (server.hasArg("message")) {
    sendNRF24Message(server.arg("message"));
    server.sendHeader("Location", "/");
    server.send(303);
  } else {
    server.send(400, "text/plain", "No message");
  }
}
