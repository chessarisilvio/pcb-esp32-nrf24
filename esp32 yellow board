//USE THIS TO THE BOTH OF THE ESP32 YELLOW DISPLAY BOARD
#include <WiFi.h>
#include <WebServer.h>
#include <TFT_eSPI.h>

// WiFi credentials
const char* ssid = "YOUR_WIFI_SSID";
const char* password = "YOUR_WIFI_PASSWORD";

WebServer server(80);
TFT_eSPI tft = TFT_eSPI();

String lastMessage = "Waiting for data...";
String nodeID = "Display A";  // Change to "Display B" for the second board
unsigned long lastUpdateTime = 0;

void setup() {
  Serial.begin(115200);
  Serial.println("\n=== ESP32 Display Board ===");
  
  tft.init();
  tft.setRotation(1);  
  tft.fillScreen(TFT_BLACK);
  tft.setTextColor(TFT_WHITE, TFT_BLACK);
  tft.setTextSize(2);
  
  tft.setCursor(10, 10);
  tft.println("Connecting to WiFi...");

//put ur credentials
  WiFi.begin(ssid, password);
  Serial.print("Connecting to WiFi");
  
  int attempts = 0;
  while (WiFi.status() != WL_CONNECTED && attempts < 20) {
    delay(500);
    Serial.print(".");
    attempts++;
  }
  
  if (WiFi.status() == WL_CONNECTED) {
    Serial.println("\nWiFi connected successfully!");
    Serial.print("IP Address: ");
    Serial.println(WiFi.localIP());
    
    // Display connection info
    tft.fillScreen(TFT_BLACK);
    tft.setCursor(10, 10);
    tft.setTextColor(TFT_GREEN, TFT_BLACK);
    tft.println("WiFi Connected!");
    tft.setTextColor(TFT_WHITE, TFT_BLACK);
    tft.print("IP: ");
    tft.println(WiFi.localIP());
    tft.println("");
    tft.print("Node: ");
    tft.println(nodeID);
    
    delay(3000);
  } else {
    Serial.println("\nWiFi connection FAILED!");
    tft.fillScreen(TFT_BLACK);
    tft.setCursor(10, 10);
    tft.setTextColor(TFT_RED, TFT_BLACK);
    tft.println("WiFi Failed!");
    tft.setTextColor(TFT_WHITE, TFT_BLACK);
    tft.println("Check credentials");
    while(1);  // Stop here if WiFi fails
  }
  

  server.on("/", handleRoot);
  server.on("/update", HTTP_POST, handleUpdate);
  server.on("/status", handleStatus);
  server.begin();
  
  Serial.println("HTTP server started on port 80");
  Serial.println("Ready to receive messages");
  

  updateDisplay();
}

void loop() {
  server.handleClient();
  
  // Auto-refresh display if no updates for a while
  if (millis() - lastUpdateTime > 30000) {
    tft.setCursor(10, 220);
    tft.setTextSize(1);
    tft.setTextColor(TFT_DARKGREY, TFT_BLACK);
    tft.print("Last update: ");
    tft.print((millis() - lastUpdateTime) / 1000);
    tft.print("s ago  ");
  }
  
  delay(100);
}

void handleRoot() {
  String html = "<html><head><meta charset='UTF-8'><meta name='viewport' content='width=device-width, initial-scale=1'></head><body>";
  html += "<h1>" + nodeID + "</h1>";
  html += "<h2>Status: Online</h2>";
  html += "<p><strong>Last Message:</strong><br>" + lastMessage + "</p>";
  html += "<p><strong>IP:</strong> " + WiFi.localIP().toString() + "</p>";
  html += "<p><strong>Uptime:</strong> " + String(millis() / 1000) + " seconds</p>";
  html += "</body></html>";
  
  server.send(200, "text/html", html);
}

void handleUpdate() {
  if (server.hasArg("message")) {
    lastMessage = server.arg("message");
    lastUpdateTime = millis();
    
    Serial.print("MESSAGE RECEIVED: ");
    Serial.println(lastMessage);
    
    updateDisplay();
    server.send(200, "text/plain", "OK");
  } else {
    server.send(400, "text/plain", "Bad Request: missing 'message' parameter");
  }
}

void handleStatus() {
  String json = "{";
  json += "\"node\":\"" + nodeID + "\",";
  json += "\"ip\":\"" + WiFi.localIP().toString() + "\",";
  json += "\"uptime\":" + String(millis() / 1000) + ",";
  json += "\"lastMessage\":\"" + lastMessage + "\",";
  json += "\"lastUpdate\":" + String(lastUpdateTime) + "";
  json += "}";
  
  server.send(200, "application/json", json);
}

void updateDisplay() {
  // Clear screen
  tft.fillScreen(TFT_BLACK);
  
  tft.fillRect(0, 0, 320, 40, TFT_NAVY);
  tft.setCursor(10, 12);
  tft.setTextSize(2);
  tft.setTextColor(TFT_YELLOW, TFT_NAVY);
  tft.println(nodeID + " - nRF24 Display");
  
  tft.setCursor(10, 60);
  tft.setTextColor(TFT_CYAN, TFT_BLACK);
  tft.setTextSize(2);
  tft.println("Received Message:");
  
  tft.drawLine(10, 85, 310, 85, TFT_DARKGREY);
  t
  tft.setCursor(10, 100);
  tft.setTextColor(TFT_WHITE, TFT_BLACK);
  tft.setTextSize(3);
  
  int cursorY = 100;
  String displayText = lastMessage;
  
  while (displayText.length() > 0) {
    int breakPoint = 15;  // Characters per line
    if (displayText.length() <= breakPoint) {
      tft.setCursor(10, cursorY);
      tft.println(displayText);
      break;
    } else {
      String line = displayText.substring(0, breakPoint);
      tft.setCursor(10, cursorY);
      tft.println(line);
      displayText = displayText.substring(breakPoint);
      cursorY += 30;
    }
  }
  
  // Draw footer
  tft.setCursor(10, 210);
  tft.setTextSize(1);
  tft.setTextColor(TFT_DARKGREY, TFT_BLACK);
  tft.print("IP: ");
  tft.print(WiFi.localIP());
  tft.print(" | Time: ");
  tft.print(millis() / 1000);
  tft.println("s");
}
