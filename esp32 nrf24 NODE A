#include <SPI.h>
#include <RF24.h>
#include <WiFi.h>
#include <HTTPClient.h>
#include <WebServer.h>

// Replace with your WiFi network credentials
const char* ssid = "YOUR_WIFI_SSID";
const char* password = "YOUR_WIFI_PASSWORD";

const char* myDisplayIP = "192.168.1.100";  // IP of the display ESP32

#define CE_PIN   17
#define CSN_PIN  5

const byte txAddress[6] = "00001";
const byte rxAddress[6] = "00002";

RF24 radio(CE_PIN, CSN_PIN);
WebServer server(8080);

String lastReceivedMessage = "";
unsigned long lastSendTime = 0;
const unsigned long sendInterval = 5000;

void setup() {
  Serial.begin(115200);
  Serial.println("Node A starting...");

  if (!radio.begin()) {
    Serial.println("Failed to initialize nRF24 radio");
    while (1);
  }

  radio.openWritingPipe(txAddress);
  radio.openReadingPipe(1, rxAddress);
  radio.setPALevel(RF24_PA_LOW);
  radio.setDataRate(RF24_250KBPS);
  radio.startListening();

  Serial.println("nRF24 radio ready");
  Serial.print("TX Address: "); Serial.println("00001");
  Serial.print("RX Address: "); Serial.println("00002");

  WiFi.begin(ssid, password);
  Serial.print("Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\nWiFi connected!");
  Serial.print("IP Address: "); Serial.println(WiFi.localIP());

  server.on("/", handleRoot);
  server.on("/send", HTTP_POST, handleSend);
  server.begin();

  Serial.println("Server started, ready for messages");
}

void loop() {
  server.handleClient();

  if (radio.available()) {
    char buffer[32] = {0};
    radio.read(&buffer, sizeof(buffer));
    lastReceivedMessage = String(buffer);

    Serial.println("--------- Message Received ---------");
    Serial.println(lastReceivedMessage);
    Serial.println("------------------------------------");

    sendToDisplay(lastReceivedMessage);
  }

  if (millis() - lastSendTime > sendInterval) {
    String testMsg = "Node A uptime: " + String(millis() / 1000) + "s";
    sendNRF24Message(testMsg);
    lastSendTime = millis();
  }

  delay(10);
}

void sendNRF24Message(String msg) {
  radio.stopListening();

  char data[32];
  msg.toCharArray(data, 32);

  bool ok = radio.write(&data, sizeof(data));
  Serial.print("Sending: "); Serial.print(msg);
  Serial.println(ok ? " Success" : " Failed");

  radio.startListening();
}

void sendToDisplay(String msg) {
  if (WiFi.status() == WL_CONNECTED) {
    HTTPClient http;
    String url = "http://" + String(myDisplayIP) + "/update";

    http.begin(url);
    http.addHeader("Content-Type", "application/x-www-form-urlencoded");

    int code = http.POST("message=" + msg);

    if (code > 0) Serial.printf("Display update HTTP %d\n", code);
    else Serial.printf("Failed to update display: %s\n", http.errorToString(code).c_str());

    http.end();
  } else {
    Serial.println("WiFi disconnected, can't send to display");
  }
}

void handleRoot() {
  String html =
    "<html><body><h1>Node A Panel</h1>"
    "<form action='/send' method='POST'>"
    "<input name='message' placeholder='Enter message' maxlength='30'>"
    "<input type='submit' value='Send'>"
    "</form>"
    "<p>Last received: " + lastReceivedMessage + "</p></body></html>";

  server.send(200, "text/html", html);
}

void handleSend() {
  if (server.hasArg("message")) {
    sendNRF24Message(server.arg("message"));
    server.sendHeader("Location", "/");
    server.send(303);
  } else {
    server.send(400, "text/plain", "No message received");
  }
}

